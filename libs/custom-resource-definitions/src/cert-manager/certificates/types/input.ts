// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
// @ts-nocheck
import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta, ObjectMetaPatch} from "../meta/v1";

export namespace cert_manager {
    export namespace v1 {
        /**
         * A Certificate resource should be created to ensure an up to date and signed
         * X.509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`.
         *
         * The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).
         */
        export interface Certificate {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"cert-manager.io/v1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"Certificate">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<ObjectMeta>;
            spec?: pulumi.Input<inputs.cert_manager.v1.CertificateSpec>;
            status?: pulumi.Input<inputs.cert_manager.v1.CertificateStatus>;
        }

        /**
         * Specification of the desired state of the Certificate resource.
         * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateSpec {
            /**
             * Defines extra output formats of the private key and signed certificate chain
             * to be written to this Certificate's target Secret.
             *
             * This is a Beta Feature enabled by default. It can be disabled with the
             * `--feature-gates=AdditionalCertificateOutputFormats=false` option set on both
             * the controller and webhook components.
             */
            additionalOutputFormats?: pulumi.Input<pulumi.Input<inputs.cert_manager.v1.CertificateSpecAdditionalOutputFormats>[]>;
            /**
             * Requested common name X509 certificate subject attribute.
             * More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6
             * NOTE: TLS clients will ignore this value when any subject alternative name is
             * set (see https://tools.ietf.org/html/rfc6125#section-6.4.4).
             *
             * Should have a length of 64 characters or fewer to avoid generating invalid CSRs.
             * Cannot be set if the `literalSubject` field is set.
             */
            commonName?: pulumi.Input<string>;
            /**
             * Requested DNS subject alternative names.
             */
            dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
             * issuer may choose to ignore the requested duration, just like any other
             * requested attribute.
             *
             * If unset, this defaults to 90 days.
             * Minimum accepted duration is 1 hour.
             * Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
             */
            duration?: pulumi.Input<string>;
            /**
             * Requested email subject alternative names.
             */
            emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Whether the KeyUsage and ExtKeyUsage extensions should be set in the encoded CSR.
             *
             * This option defaults to true, and should only be disabled if the target
             * issuer does not support CSRs with these X509 KeyUsage/ ExtKeyUsage extensions.
             */
            encodeUsagesInRequest?: pulumi.Input<boolean>;
            /**
             * Requested IP address subject alternative names.
             */
            ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Requested basic constraints isCA value.
             * The isCA value is used to set the `isCA` field on the created CertificateRequest
             * resources. Note that the issuer may choose to ignore the requested isCA value, just
             * like any other requested attribute.
             *
             * If true, this will automatically add the `cert sign` usage to the list
             * of requested `usages`.
             */
            isCA?: pulumi.Input<boolean>;
            issuerRef?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecIssuerRef>;
            keystores?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecKeystores>;
            /**
             * Requested X.509 certificate subject, represented using the LDAP "String
             * Representation of a Distinguished Name" [1].
             * Important: the LDAP string format also specifies the order of the attributes
             * in the subject, this is important when issuing certs for LDAP authentication.
             * Example: `CN=foo,DC=corp,DC=example,DC=com`
             * More info [1]: https://datatracker.ietf.org/doc/html/rfc4514
             * More info: https://github.com/cert-manager/cert-manager/issues/3203
             * More info: https://github.com/cert-manager/cert-manager/issues/4424
             *
             * Cannot be set if the `subject` or `commonName` field is set.
             */
            literalSubject?: pulumi.Input<string>;
            nameConstraints?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecNameConstraints>;
            /**
             * `otherNames` is an escape hatch for SAN that allows any type. We currently restrict the support to string like otherNames, cf RFC 5280 p 37
             * Any UTF8 String valued otherName can be passed with by setting the keys oid: x.x.x.x and UTF8Value: somevalue for `otherName`.
             * Most commonly this would be UPN set with oid: 1.3.6.1.4.1.311.20.2.3
             * You should ensure that any OID passed is valid for the UTF8String type as we do not explicitly validate this.
             */
            otherNames?: pulumi.Input<pulumi.Input<inputs.cert_manager.v1.CertificateSpecOtherNames>[]>;
            privateKey?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecPrivateKey>;
            /**
             * How long before the currently issued certificate's expiry cert-manager should
             * renew the certificate. For example, if a certificate is valid for 60 minutes,
             * and `renewBefore=10m`, cert-manager will begin to attempt to renew the certificate
             * 50 minutes after it was issued (i.e. when there are 10 minutes remaining until
             * the certificate is no longer valid).
             *
             * NOTE: The actual lifetime of the issued certificate is used to determine the
             * renewal time. If an issuer returns a certificate with a different lifetime than
             * the one requested, cert-manager will use the lifetime of the issued certificate.
             *
             * If unset, this defaults to 1/3 of the issued certificate's lifetime.
             * Minimum accepted value is 5 minutes.
             * Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
             * Cannot be set if the `renewBeforePercentage` field is set.
             */
            renewBefore?: pulumi.Input<string>;
            /**
             * `renewBeforePercentage` is like `renewBefore`, except it is a relative percentage
             * rather than an absolute duration. For example, if a certificate is valid for 60
             * minutes, and  `renewBeforePercentage=25`, cert-manager will begin to attempt to
             * renew the certificate 45 minutes after it was issued (i.e. when there are 15
             * minutes (25%) remaining until the certificate is no longer valid).
             *
             * NOTE: The actual lifetime of the issued certificate is used to determine the
             * renewal time. If an issuer returns a certificate with a different lifetime than
             * the one requested, cert-manager will use the lifetime of the issued certificate.
             *
             * Value must be an integer in the range (0,100). The minimum effective
             * `renewBefore` derived from the `renewBeforePercentage` and `duration` fields is 5
             * minutes.
             * Cannot be set if the `renewBefore` field is set.
             */
            renewBeforePercentage?: pulumi.Input<number>;
            /**
             * The maximum number of CertificateRequest revisions that are maintained in
             * the Certificate's history. Each revision represents a single `CertificateRequest`
             * created by this Certificate, either when it was created, renewed, or Spec
             * was changed. Revisions will be removed by oldest first if the number of
             * revisions exceeds this number.
             *
             * If set, revisionHistoryLimit must be a value of `1` or greater.
             * If unset (`nil`), revisions will not be garbage collected.
             * Default value is `nil`.
             */
            revisionHistoryLimit?: pulumi.Input<number>;
            /**
             * Name of the Secret resource that will be automatically created and
             * managed by this Certificate resource. It will be populated with a
             * private key and certificate, signed by the denoted issuer. The Secret
             * resource lives in the same namespace as the Certificate resource.
             */
            secretName?: pulumi.Input<string>;
            secretTemplate?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecSecretTemplate>;
            subject?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecSubject>;
            /**
             * Requested URI subject alternative names.
             */
            uris?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Requested key usages and extended key usages.
             * These usages are used to set the `usages` field on the created CertificateRequest
             * resources. If `encodeUsagesInRequest` is unset or set to `true`, the usages
             * will additionally be encoded in the `request` field which contains the CSR blob.
             *
             * If unset, defaults to `digital signature` and `key encipherment`.
             */
            usages?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * CertificateAdditionalOutputFormat defines an additional output format of a
         * Certificate resource. These contain supplementary data formats of the signed
         * certificate chain and paired private key.
         */
        export interface CertificateSpecAdditionalOutputFormats {
            /**
             * Type is the name of the format type that should be written to the
             * Certificate's target Secret.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * CertificateAdditionalOutputFormat defines an additional output format of a
         * Certificate resource. These contain supplementary data formats of the signed
         * certificate chain and paired private key.
         */
        export interface CertificateSpecAdditionalOutputFormatsPatch {
            /**
             * Type is the name of the format type that should be written to the
             * Certificate's target Secret.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Reference to the issuer responsible for issuing the certificate.
         * If the issuer is namespace-scoped, it must be in the same namespace
         * as the Certificate. If the issuer is cluster-scoped, it can be used
         * from any namespace.
         *
         * The `name` field of the reference must always be specified.
         */
        export interface CertificateSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind of the resource being referred to.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Reference to the issuer responsible for issuing the certificate.
         * If the issuer is namespace-scoped, it must be in the same namespace
         * as the Certificate. If the issuer is cluster-scoped, it can be used
         * from any namespace.
         *
         * The `name` field of the reference must always be specified.
         */
        export interface CertificateSpecIssuerRefPatch {
            /**
             * Group of the resource being referred to.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind of the resource being referred to.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Additional keystore output formats to be stored in the Certificate's Secret.
         */
        export interface CertificateSpecKeystores {
            jks?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecKeystoresJks>;
            pkcs12?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecKeystoresPkcs12>;
        }

        /**
         * JKS configures options for storing a JKS keystore in the
         * `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresJks {
            /**
             * Alias specifies the alias of the key in the keystore, required by the JKS format.
             * If not provided, the default alias `certificate` will be used.
             */
            alias?: pulumi.Input<string>;
            /**
             * Create enables JKS keystore creation for the Certificate.
             * If true, a file named `keystore.jks` will be created in the target
             * Secret resource, encrypted using the password stored in
             * `passwordSecretRef`.
             * The keystore file will be updated immediately.
             * If the issuer provided a CA certificate, a file named `truststore.jks`
             * will also be created in the target Secret resource, encrypted using the
             * password stored in `passwordSecretRef`
             * containing the issuing Certificate Authority
             */
            create?: pulumi.Input<boolean>;
            passwordSecretRef?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecKeystoresJksPasswordSecretRef>;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource
         * containing the password used to encrypt the JKS keystore.
         */
        export interface CertificateSpecKeystoresJksPasswordSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource
         * containing the password used to encrypt the JKS keystore.
         */
        export interface CertificateSpecKeystoresJksPasswordSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * JKS configures options for storing a JKS keystore in the
         * `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresJksPatch {
            /**
             * Alias specifies the alias of the key in the keystore, required by the JKS format.
             * If not provided, the default alias `certificate` will be used.
             */
            alias?: pulumi.Input<string>;
            /**
             * Create enables JKS keystore creation for the Certificate.
             * If true, a file named `keystore.jks` will be created in the target
             * Secret resource, encrypted using the password stored in
             * `passwordSecretRef`.
             * The keystore file will be updated immediately.
             * If the issuer provided a CA certificate, a file named `truststore.jks`
             * will also be created in the target Secret resource, encrypted using the
             * password stored in `passwordSecretRef`
             * containing the issuing Certificate Authority
             */
            create?: pulumi.Input<boolean>;
            passwordSecretRef?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecKeystoresJksPasswordSecretRefPatch>;
        }

        /**
         * Additional keystore output formats to be stored in the Certificate's Secret.
         */
        export interface CertificateSpecKeystoresPatch {
            jks?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecKeystoresJksPatch>;
            pkcs12?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecKeystoresPkcs12Patch>;
        }

        /**
         * PKCS12 configures options for storing a PKCS12 keystore in the
         * `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresPkcs12 {
            /**
             * Create enables PKCS12 keystore creation for the Certificate.
             * If true, a file named `keystore.p12` will be created in the target
             * Secret resource, encrypted using the password stored in
             * `passwordSecretRef`.
             * The keystore file will be updated immediately.
             * If the issuer provided a CA certificate, a file named `truststore.p12` will
             * also be created in the target Secret resource, encrypted using the
             * password stored in `passwordSecretRef` containing the issuing Certificate
             * Authority
             */
            create?: pulumi.Input<boolean>;
            passwordSecretRef?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecKeystoresPkcs12PasswordSecretRef>;
            /**
             * Profile specifies the key and certificate encryption algorithms and the HMAC algorithm
             * used to create the PKCS12 keystore. Default value is `LegacyRC2` for backward compatibility.
             *
             * If provided, allowed values are:
             * `LegacyRC2`: Deprecated. Not supported by default in OpenSSL 3 or Java 20.
             * `LegacyDES`: Less secure algorithm. Use this option for maximal compatibility.
             * `Modern2023`: Secure algorithm. Use this option in case you have to always use secure algorithms
             * (eg. because of company policy). Please note that the security of the algorithm is not that important
             * in reality, because the unencrypted certificate and private key are also stored in the Secret.
             */
            profile?: pulumi.Input<string>;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource
         * containing the password used to encrypt the PKCS12 keystore.
         */
        export interface CertificateSpecKeystoresPkcs12PasswordSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource
         * containing the password used to encrypt the PKCS12 keystore.
         */
        export interface CertificateSpecKeystoresPkcs12PasswordSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * PKCS12 configures options for storing a PKCS12 keystore in the
         * `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresPkcs12Patch {
            /**
             * Create enables PKCS12 keystore creation for the Certificate.
             * If true, a file named `keystore.p12` will be created in the target
             * Secret resource, encrypted using the password stored in
             * `passwordSecretRef`.
             * The keystore file will be updated immediately.
             * If the issuer provided a CA certificate, a file named `truststore.p12` will
             * also be created in the target Secret resource, encrypted using the
             * password stored in `passwordSecretRef` containing the issuing Certificate
             * Authority
             */
            create?: pulumi.Input<boolean>;
            passwordSecretRef?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecKeystoresPkcs12PasswordSecretRefPatch>;
            /**
             * Profile specifies the key and certificate encryption algorithms and the HMAC algorithm
             * used to create the PKCS12 keystore. Default value is `LegacyRC2` for backward compatibility.
             *
             * If provided, allowed values are:
             * `LegacyRC2`: Deprecated. Not supported by default in OpenSSL 3 or Java 20.
             * `LegacyDES`: Less secure algorithm. Use this option for maximal compatibility.
             * `Modern2023`: Secure algorithm. Use this option in case you have to always use secure algorithms
             * (eg. because of company policy). Please note that the security of the algorithm is not that important
             * in reality, because the unencrypted certificate and private key are also stored in the Secret.
             */
            profile?: pulumi.Input<string>;
        }

        /**
         * x.509 certificate NameConstraint extension which MUST NOT be used in a non-CA certificate.
         * More Info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.10
         *
         * This is an Alpha Feature and is only enabled with the
         * `--feature-gates=NameConstraints=true` option set on both
         * the controller and webhook components.
         */
        export interface CertificateSpecNameConstraints {
            /**
             * if true then the name constraints are marked critical.
             */
            critical?: pulumi.Input<boolean>;
            excluded?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecNameConstraintsExcluded>;
            permitted?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecNameConstraintsPermitted>;
        }

        /**
         * Excluded contains the constraints which must be disallowed. Any name matching a
         * restriction in the excluded field is invalid regardless
         * of information appearing in the permitted
         */
        export interface CertificateSpecNameConstraintsExcluded {
            /**
             * DNSDomains is a list of DNS domains that are permitted or excluded.
             */
            dnsDomains?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * EmailAddresses is a list of Email Addresses that are permitted or excluded.
             */
            emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IPRanges is a list of IP Ranges that are permitted or excluded.
             * This should be a valid CIDR notation.
             */
            ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * URIDomains is a list of URI domains that are permitted or excluded.
             */
            uriDomains?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Excluded contains the constraints which must be disallowed. Any name matching a
         * restriction in the excluded field is invalid regardless
         * of information appearing in the permitted
         */
        export interface CertificateSpecNameConstraintsExcludedPatch {
            /**
             * DNSDomains is a list of DNS domains that are permitted or excluded.
             */
            dnsDomains?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * EmailAddresses is a list of Email Addresses that are permitted or excluded.
             */
            emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IPRanges is a list of IP Ranges that are permitted or excluded.
             * This should be a valid CIDR notation.
             */
            ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * URIDomains is a list of URI domains that are permitted or excluded.
             */
            uriDomains?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * x.509 certificate NameConstraint extension which MUST NOT be used in a non-CA certificate.
         * More Info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.10
         *
         * This is an Alpha Feature and is only enabled with the
         * `--feature-gates=NameConstraints=true` option set on both
         * the controller and webhook components.
         */
        export interface CertificateSpecNameConstraintsPatch {
            /**
             * if true then the name constraints are marked critical.
             */
            critical?: pulumi.Input<boolean>;
            excluded?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecNameConstraintsExcludedPatch>;
            permitted?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecNameConstraintsPermittedPatch>;
        }

        /**
         * Permitted contains the constraints in which the names must be located.
         */
        export interface CertificateSpecNameConstraintsPermitted {
            /**
             * DNSDomains is a list of DNS domains that are permitted or excluded.
             */
            dnsDomains?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * EmailAddresses is a list of Email Addresses that are permitted or excluded.
             */
            emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IPRanges is a list of IP Ranges that are permitted or excluded.
             * This should be a valid CIDR notation.
             */
            ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * URIDomains is a list of URI domains that are permitted or excluded.
             */
            uriDomains?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Permitted contains the constraints in which the names must be located.
         */
        export interface CertificateSpecNameConstraintsPermittedPatch {
            /**
             * DNSDomains is a list of DNS domains that are permitted or excluded.
             */
            dnsDomains?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * EmailAddresses is a list of Email Addresses that are permitted or excluded.
             */
            emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IPRanges is a list of IP Ranges that are permitted or excluded.
             * This should be a valid CIDR notation.
             */
            ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * URIDomains is a list of URI domains that are permitted or excluded.
             */
            uriDomains?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface CertificateSpecOtherNames {
            /**
             * OID is the object identifier for the otherName SAN.
             * The object identifier must be expressed as a dotted string, for
             * example, "1.2.840.113556.1.4.221".
             */
            oid?: pulumi.Input<string>;
            /**
             * utf8Value is the string value of the otherName SAN.
             * The utf8Value accepts any valid UTF8 string to set as value for the otherName SAN.
             */
            utf8Value?: pulumi.Input<string>;
        }

        export interface CertificateSpecOtherNamesPatch {
            /**
             * OID is the object identifier for the otherName SAN.
             * The object identifier must be expressed as a dotted string, for
             * example, "1.2.840.113556.1.4.221".
             */
            oid?: pulumi.Input<string>;
            /**
             * utf8Value is the string value of the otherName SAN.
             * The utf8Value accepts any valid UTF8 string to set as value for the otherName SAN.
             */
            utf8Value?: pulumi.Input<string>;
        }

        /**
         * Specification of the desired state of the Certificate resource.
         * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateSpecPatch {
            /**
             * Defines extra output formats of the private key and signed certificate chain
             * to be written to this Certificate's target Secret.
             *
             * This is a Beta Feature enabled by default. It can be disabled with the
             * `--feature-gates=AdditionalCertificateOutputFormats=false` option set on both
             * the controller and webhook components.
             */
            additionalOutputFormats?: pulumi.Input<pulumi.Input<inputs.cert_manager.v1.CertificateSpecAdditionalOutputFormatsPatch>[]>;
            /**
             * Requested common name X509 certificate subject attribute.
             * More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6
             * NOTE: TLS clients will ignore this value when any subject alternative name is
             * set (see https://tools.ietf.org/html/rfc6125#section-6.4.4).
             *
             * Should have a length of 64 characters or fewer to avoid generating invalid CSRs.
             * Cannot be set if the `literalSubject` field is set.
             */
            commonName?: pulumi.Input<string>;
            /**
             * Requested DNS subject alternative names.
             */
            dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
             * issuer may choose to ignore the requested duration, just like any other
             * requested attribute.
             *
             * If unset, this defaults to 90 days.
             * Minimum accepted duration is 1 hour.
             * Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
             */
            duration?: pulumi.Input<string>;
            /**
             * Requested email subject alternative names.
             */
            emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Whether the KeyUsage and ExtKeyUsage extensions should be set in the encoded CSR.
             *
             * This option defaults to true, and should only be disabled if the target
             * issuer does not support CSRs with these X509 KeyUsage/ ExtKeyUsage extensions.
             */
            encodeUsagesInRequest?: pulumi.Input<boolean>;
            /**
             * Requested IP address subject alternative names.
             */
            ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Requested basic constraints isCA value.
             * The isCA value is used to set the `isCA` field on the created CertificateRequest
             * resources. Note that the issuer may choose to ignore the requested isCA value, just
             * like any other requested attribute.
             *
             * If true, this will automatically add the `cert sign` usage to the list
             * of requested `usages`.
             */
            isCA?: pulumi.Input<boolean>;
            issuerRef?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecIssuerRefPatch>;
            keystores?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecKeystoresPatch>;
            /**
             * Requested X.509 certificate subject, represented using the LDAP "String
             * Representation of a Distinguished Name" [1].
             * Important: the LDAP string format also specifies the order of the attributes
             * in the subject, this is important when issuing certs for LDAP authentication.
             * Example: `CN=foo,DC=corp,DC=example,DC=com`
             * More info [1]: https://datatracker.ietf.org/doc/html/rfc4514
             * More info: https://github.com/cert-manager/cert-manager/issues/3203
             * More info: https://github.com/cert-manager/cert-manager/issues/4424
             *
             * Cannot be set if the `subject` or `commonName` field is set.
             */
            literalSubject?: pulumi.Input<string>;
            nameConstraints?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecNameConstraintsPatch>;
            /**
             * `otherNames` is an escape hatch for SAN that allows any type. We currently restrict the support to string like otherNames, cf RFC 5280 p 37
             * Any UTF8 String valued otherName can be passed with by setting the keys oid: x.x.x.x and UTF8Value: somevalue for `otherName`.
             * Most commonly this would be UPN set with oid: 1.3.6.1.4.1.311.20.2.3
             * You should ensure that any OID passed is valid for the UTF8String type as we do not explicitly validate this.
             */
            otherNames?: pulumi.Input<pulumi.Input<inputs.cert_manager.v1.CertificateSpecOtherNamesPatch>[]>;
            privateKey?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecPrivateKeyPatch>;
            /**
             * How long before the currently issued certificate's expiry cert-manager should
             * renew the certificate. For example, if a certificate is valid for 60 minutes,
             * and `renewBefore=10m`, cert-manager will begin to attempt to renew the certificate
             * 50 minutes after it was issued (i.e. when there are 10 minutes remaining until
             * the certificate is no longer valid).
             *
             * NOTE: The actual lifetime of the issued certificate is used to determine the
             * renewal time. If an issuer returns a certificate with a different lifetime than
             * the one requested, cert-manager will use the lifetime of the issued certificate.
             *
             * If unset, this defaults to 1/3 of the issued certificate's lifetime.
             * Minimum accepted value is 5 minutes.
             * Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
             * Cannot be set if the `renewBeforePercentage` field is set.
             */
            renewBefore?: pulumi.Input<string>;
            /**
             * `renewBeforePercentage` is like `renewBefore`, except it is a relative percentage
             * rather than an absolute duration. For example, if a certificate is valid for 60
             * minutes, and  `renewBeforePercentage=25`, cert-manager will begin to attempt to
             * renew the certificate 45 minutes after it was issued (i.e. when there are 15
             * minutes (25%) remaining until the certificate is no longer valid).
             *
             * NOTE: The actual lifetime of the issued certificate is used to determine the
             * renewal time. If an issuer returns a certificate with a different lifetime than
             * the one requested, cert-manager will use the lifetime of the issued certificate.
             *
             * Value must be an integer in the range (0,100). The minimum effective
             * `renewBefore` derived from the `renewBeforePercentage` and `duration` fields is 5
             * minutes.
             * Cannot be set if the `renewBefore` field is set.
             */
            renewBeforePercentage?: pulumi.Input<number>;
            /**
             * The maximum number of CertificateRequest revisions that are maintained in
             * the Certificate's history. Each revision represents a single `CertificateRequest`
             * created by this Certificate, either when it was created, renewed, or Spec
             * was changed. Revisions will be removed by oldest first if the number of
             * revisions exceeds this number.
             *
             * If set, revisionHistoryLimit must be a value of `1` or greater.
             * If unset (`nil`), revisions will not be garbage collected.
             * Default value is `nil`.
             */
            revisionHistoryLimit?: pulumi.Input<number>;
            /**
             * Name of the Secret resource that will be automatically created and
             * managed by this Certificate resource. It will be populated with a
             * private key and certificate, signed by the denoted issuer. The Secret
             * resource lives in the same namespace as the Certificate resource.
             */
            secretName?: pulumi.Input<string>;
            secretTemplate?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecSecretTemplatePatch>;
            subject?: pulumi.Input<inputs.cert_manager.v1.CertificateSpecSubjectPatch>;
            /**
             * Requested URI subject alternative names.
             */
            uris?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Requested key usages and extended key usages.
             * These usages are used to set the `usages` field on the created CertificateRequest
             * resources. If `encodeUsagesInRequest` is unset or set to `true`, the usages
             * will additionally be encoded in the `request` field which contains the CSR blob.
             *
             * If unset, defaults to `digital signature` and `key encipherment`.
             */
            usages?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Private key options. These include the key algorithm and size, the used
         * encoding and the rotation policy.
         */
        export interface CertificateSpecPrivateKey {
            /**
             * Algorithm is the private key algorithm of the corresponding private key
             * for this certificate.
             *
             * If provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`.
             * If `algorithm` is specified and `size` is not provided,
             * key size of 2048 will be used for `RSA` key algorithm and
             * key size of 256 will be used for `ECDSA` key algorithm.
             * key size is ignored when using the `Ed25519` key algorithm.
             */
            algorithm?: pulumi.Input<string>;
            /**
             * The private key cryptography standards (PKCS) encoding for this
             * certificate's private key to be encoded in.
             *
             * If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1
             * and PKCS#8, respectively.
             * Defaults to `PKCS1` if not specified.
             */
            encoding?: pulumi.Input<string>;
            /**
             * RotationPolicy controls how private keys should be regenerated when a
             * re-issuance is being processed.
             *
             * If set to `Never`, a private key will only be generated if one does not
             * already exist in the target `spec.secretName`. If one does exist but it
             * does not have the correct algorithm or size, a warning will be raised
             * to await user intervention.
             * If set to `Always`, a private key matching the specified requirements
             * will be generated whenever a re-issuance occurs.
             * Default is `Never` for backward compatibility.
             */
            rotationPolicy?: pulumi.Input<string>;
            /**
             * Size is the key bit size of the corresponding private key for this certificate.
             *
             * If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`,
             * and will default to `2048` if not specified.
             * If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`,
             * and will default to `256` if not specified.
             * If `algorithm` is set to `Ed25519`, Size is ignored.
             * No other values are allowed.
             */
            size?: pulumi.Input<number>;
        }

        /**
         * Private key options. These include the key algorithm and size, the used
         * encoding and the rotation policy.
         */
        export interface CertificateSpecPrivateKeyPatch {
            /**
             * Algorithm is the private key algorithm of the corresponding private key
             * for this certificate.
             *
             * If provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`.
             * If `algorithm` is specified and `size` is not provided,
             * key size of 2048 will be used for `RSA` key algorithm and
             * key size of 256 will be used for `ECDSA` key algorithm.
             * key size is ignored when using the `Ed25519` key algorithm.
             */
            algorithm?: pulumi.Input<string>;
            /**
             * The private key cryptography standards (PKCS) encoding for this
             * certificate's private key to be encoded in.
             *
             * If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1
             * and PKCS#8, respectively.
             * Defaults to `PKCS1` if not specified.
             */
            encoding?: pulumi.Input<string>;
            /**
             * RotationPolicy controls how private keys should be regenerated when a
             * re-issuance is being processed.
             *
             * If set to `Never`, a private key will only be generated if one does not
             * already exist in the target `spec.secretName`. If one does exist but it
             * does not have the correct algorithm or size, a warning will be raised
             * to await user intervention.
             * If set to `Always`, a private key matching the specified requirements
             * will be generated whenever a re-issuance occurs.
             * Default is `Never` for backward compatibility.
             */
            rotationPolicy?: pulumi.Input<string>;
            /**
             * Size is the key bit size of the corresponding private key for this certificate.
             *
             * If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`,
             * and will default to `2048` if not specified.
             * If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`,
             * and will default to `256` if not specified.
             * If `algorithm` is set to `Ed25519`, Size is ignored.
             * No other values are allowed.
             */
            size?: pulumi.Input<number>;
        }

        /**
         * Defines annotations and labels to be copied to the Certificate's Secret.
         * Labels and annotations on the Secret will be changed as they appear on the
         * SecretTemplate when added or removed. SecretTemplate annotations are added
         * in conjunction with, and cannot overwrite, the base set of annotations
         * cert-manager sets on the Certificate's Secret.
         */
        export interface CertificateSpecSecretTemplate {
            /**
             * Annotations is a key value map to be copied to the target Kubernetes Secret.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels is a key value map to be copied to the target Kubernetes Secret.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Defines annotations and labels to be copied to the Certificate's Secret.
         * Labels and annotations on the Secret will be changed as they appear on the
         * SecretTemplate when added or removed. SecretTemplate annotations are added
         * in conjunction with, and cannot overwrite, the base set of annotations
         * cert-manager sets on the Certificate's Secret.
         */
        export interface CertificateSpecSecretTemplatePatch {
            /**
             * Annotations is a key value map to be copied to the target Kubernetes Secret.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels is a key value map to be copied to the target Kubernetes Secret.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Requested set of X509 certificate subject attributes.
         * More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6
         *
         * The common name attribute is specified separately in the `commonName` field.
         * Cannot be set if the `literalSubject` field is set.
         */
        export interface CertificateSpecSubject {
            /**
             * Countries to be used on the Certificate.
             */
            countries?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Cities to be used on the Certificate.
             */
            localities?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Organizational Units to be used on the Certificate.
             */
            organizationalUnits?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Organizations to be used on the Certificate.
             */
            organizations?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Postal codes to be used on the Certificate.
             */
            postalCodes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * State/Provinces to be used on the Certificate.
             */
            provinces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Serial number to be used on the Certificate.
             */
            serialNumber?: pulumi.Input<string>;
            /**
             * Street addresses to be used on the Certificate.
             */
            streetAddresses?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Requested set of X509 certificate subject attributes.
         * More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6
         *
         * The common name attribute is specified separately in the `commonName` field.
         * Cannot be set if the `literalSubject` field is set.
         */
        export interface CertificateSpecSubjectPatch {
            /**
             * Countries to be used on the Certificate.
             */
            countries?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Cities to be used on the Certificate.
             */
            localities?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Organizational Units to be used on the Certificate.
             */
            organizationalUnits?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Organizations to be used on the Certificate.
             */
            organizations?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Postal codes to be used on the Certificate.
             */
            postalCodes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * State/Provinces to be used on the Certificate.
             */
            provinces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Serial number to be used on the Certificate.
             */
            serialNumber?: pulumi.Input<string>;
            /**
             * Street addresses to be used on the Certificate.
             */
            streetAddresses?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Status of the Certificate.
         * This is set and managed automatically.
         * Read-only.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateStatus {
            /**
             * List of status conditions to indicate the status of certificates.
             * Known condition types are `Ready` and `Issuing`.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cert_manager.v1.CertificateStatusConditions>[]>;
            /**
             * The number of continuous failed issuance attempts up till now. This
             * field gets removed (if set) on a successful issuance and gets set to
             * 1 if unset and an issuance has failed. If an issuance has failed, the
             * delay till the next issuance will be calculated using formula
             * time.Hour * 2 ^ (failedIssuanceAttempts - 1).
             */
            failedIssuanceAttempts?: pulumi.Input<number>;
            /**
             * LastFailureTime is set only if the latest issuance for this
             * Certificate failed and contains the time of the failure. If an
             * issuance has failed, the delay till the next issuance will be
             * calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts -
             * 1). If the latest issuance has succeeded this field will be unset.
             */
            lastFailureTime?: pulumi.Input<string>;
            /**
             * The name of the Secret resource containing the private key to be used
             * for the next certificate iteration.
             * The keymanager controller will automatically set this field if the
             * `Issuing` condition is set to `True`.
             * It will automatically unset this field when the Issuing condition is
             * not set or False.
             */
            nextPrivateKeySecretName?: pulumi.Input<string>;
            /**
             * The expiration time of the certificate stored in the secret named
             * by this resource in `spec.secretName`.
             */
            notAfter?: pulumi.Input<string>;
            /**
             * The time after which the certificate stored in the secret named
             * by this resource in `spec.secretName` is valid.
             */
            notBefore?: pulumi.Input<string>;
            /**
             * RenewalTime is the time at which the certificate will be next
             * renewed.
             * If not set, no upcoming renewal is scheduled.
             */
            renewalTime?: pulumi.Input<string>;
            /**
             * The current 'revision' of the certificate as issued.
             *
             * When a CertificateRequest resource is created, it will have the
             * `cert-manager.io/certificate-revision` set to one greater than the
             * current value of this field.
             *
             * Upon issuance, this field will be set to the value of the annotation
             * on the CertificateRequest resource used to issue the certificate.
             *
             * Persisting the value on the CertificateRequest resource allows the
             * certificates controller to know whether a request is part of an old
             * issuance or if it is part of the ongoing revision's issuance by
             * checking if the revision value in the annotation is greater than this
             * field.
             */
            revision?: pulumi.Input<number>;
        }

        /**
         * CertificateCondition contains condition information for a Certificate.
         */
        export interface CertificateStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status
             * change of this condition.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human readable description of the details of the last
             * transition, complementing reason.
             */
            message?: pulumi.Input<string>;
            /**
             * If set, this represents the .metadata.generation that the condition was
             * set based upon.
             * For instance, if .metadata.generation is currently 12, but the
             * .status.condition[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the Certificate.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Reason is a brief machine readable explanation for the condition's last
             * transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status?: pulumi.Input<string>;
            /**
             * Type of the condition, known values are (`Ready`, `Issuing`).
             */
            type?: pulumi.Input<string>;
        }

    }
}

export namespace meta {
    export namespace v1 {
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        export interface ListMeta {
            /**
             * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
             */
            continue?: pulumi.Input<string>;
            /**
             * remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
             */
            remainingItemCount?: pulumi.Input<number>;
            /**
             * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink?: pulumi.Input<string>;
        }

    }
}
